/**
 * Hurace API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { Metadata } from '../model/metadata';
import { Run } from '../model/run';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class RunsService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public runsCurrentGet(observe?: 'body', reportProgress?: boolean): Observable<Run>;
    public runsCurrentGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Run>>;
    public runsCurrentGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Run>>;
    public runsCurrentGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Run>(`${this.configuration.basePath}/Runs/current`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param skierId 
     * @param season 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public runsGet(skierId?: number, season?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Run>>;
    public runsGet(skierId?: number, season?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Run>>>;
    public runsGet(skierId?: number, season?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Run>>>;
    public runsGet(skierId?: number, season?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (skierId !== undefined && skierId !== null) {
            queryParameters = queryParameters.set('skierId', <any>skierId);
        }
        if (season !== undefined && season !== null) {
            queryParameters = queryParameters.set('season', <any>season);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Run>>(`${this.configuration.basePath}/Runs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public runsIdInterimGet(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public runsIdInterimGet(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public runsIdInterimGet(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public runsIdInterimGet(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling runsIdInterimGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<string>>(`${this.configuration.basePath}/Runs/${encodeURIComponent(String(id))}/interim`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param runNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public runsIdLeaderboardRunNumberGet(id: number, runNumber: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Run>>;
    public runsIdLeaderboardRunNumberGet(id: number, runNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Run>>>;
    public runsIdLeaderboardRunNumberGet(id: number, runNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Run>>>;
    public runsIdLeaderboardRunNumberGet(id: number, runNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling runsIdLeaderboardRunNumberGet.');
        }
        if (runNumber === null || runNumber === undefined) {
            throw new Error('Required parameter runNumber was null or undefined when calling runsIdLeaderboardRunNumberGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Run>>(`${this.configuration.basePath}/Runs/${encodeURIComponent(String(id))}/leaderboard/${encodeURIComponent(String(runNumber))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public runsMetadataGet(observe?: 'body', reportProgress?: boolean): Observable<Metadata>;
    public runsMetadataGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Metadata>>;
    public runsMetadataGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Metadata>>;
    public runsMetadataGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Metadata>(`${this.configuration.basePath}/Runs/metadata`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
