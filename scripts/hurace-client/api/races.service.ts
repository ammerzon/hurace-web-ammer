/**
 * Hurace API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { Metadata } from '../model/metadata';
import { ProblemDetails } from '../model/problemDetails';
import { Race } from '../model/race';
import { Run } from '../model/run';
import { Skier } from '../model/skier';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class RacesService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * @param id 
     * @param skier 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addRunToRace(id: number, skier?: Skier, observe?: 'body', reportProgress?: boolean): Observable<Run>;
    public addRunToRace(id: number, skier?: Skier, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Run>>;
    public addRunToRace(id: number, skier?: Skier, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Run>>;
    public addRunToRace(id: number, skier?: Skier, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addRunToRace.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Run>(`${this.configuration.basePath}/Races/${encodeURIComponent(String(id))}/runs`,
            skier,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param season 
     * @param locationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllRaces(season?: number, locationId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Race>>;
    public getAllRaces(season?: number, locationId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Race>>>;
    public getAllRaces(season?: number, locationId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Race>>>;
    public getAllRaces(season?: number, locationId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (season !== undefined && season !== null) {
            queryParameters = queryParameters.set('season', <any>season);
        }
        if (locationId !== undefined && locationId !== null) {
            queryParameters = queryParameters.set('locationId', <any>locationId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Race>>(`${this.configuration.basePath}/Races`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClosedRacesForSkier(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Race>>;
    public getClosedRacesForSkier(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Race>>>;
    public getClosedRacesForSkier(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Race>>>;
    public getClosedRacesForSkier(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getClosedRacesForSkier.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Race>>(`${this.configuration.basePath}/Races/closed/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrentRace(observe?: 'body', reportProgress?: boolean): Observable<Race>;
    public getCurrentRace(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Race>>;
    public getCurrentRace(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Race>>;
    public getCurrentRace(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Race>(`${this.configuration.basePath}/Races/current`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOpenRacesForSkier(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Race>>;
    public getOpenRacesForSkier(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Race>>>;
    public getOpenRacesForSkier(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Race>>>;
    public getOpenRacesForSkier(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getOpenRacesForSkier.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Race>>(`${this.configuration.basePath}/Races/open/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRaceMetadata(observe?: 'body', reportProgress?: boolean): Observable<Metadata>;
    public getRaceMetadata(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Metadata>>;
    public getRaceMetadata(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Metadata>>;
    public getRaceMetadata(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Metadata>(`${this.configuration.basePath}/Races/metadata`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param runNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRunsForRace(id: number, runNumber?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Run>>;
    public getRunsForRace(id: number, runNumber?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Run>>>;
    public getRunsForRace(id: number, runNumber?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Run>>>;
    public getRunsForRace(id: number, runNumber?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRunsForRace.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (runNumber !== undefined && runNumber !== null) {
            queryParameters = queryParameters.set('runNumber', <any>runNumber);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Run>>(`${this.configuration.basePath}/Races/${encodeURIComponent(String(id))}/runs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
